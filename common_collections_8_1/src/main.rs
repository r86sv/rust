#![allow(unused)]
/// Язык программирования Rust
/// 8 Общие коллекции
/// 8.1 Хранение списков значений в векторах

fn main() {
    // Создает новый вектор, содержащий строки.
    let v = vec![String::from("value")];
    // Переопределяет `v` как вектор целых чисел.
    let v = vec![1, 2, 3];
    // Создает новый, пустой вектор целых чисел.
    let mut v: Vec<i32> = Vec::new();

    // Добавляет элементы в вектор.
    v.push(5);
    v.push(6);
    v.push(7);
    v.push(8);

    // Получает третий элемент вектора по индексу.
    let third: &i32 = &v[2];
    println!(" Третий элемент: {}", third);
    // Пытается получить элемент вектора по индексу, который может быть вне границ вектора.
    let third: Option<&i32> = v.get(5);
    match third {
        Some(third) => println!(" Третий элемент: {}", third),
        None => println!(" Третий элемент не найден"),
    }

    // Создает новый вектор с предопределенными значениями.
    let v = vec![100, 32, 57];
    // Итерирует по всем элементам вектора, не изменяя их.
    for i in &v {
        println!(" i: {}", i);
    }

    // Создает новый вектор и изменяет каждый его элемент в цикле.
    let mut v = vec![100, 32, 57];
    for i in &mut v {
        *i += 50;
        println!(" i: {}", i);
    }

    // Определяет перечисление для хранения элементов различных типов в одном векторе.
    enum SpreadsheetCell {
        Int(i32),
        Float(f32),
        Char(char),
        Text(String),
    }

    // Создает вектор, содержащий элементы различных типов, определенных в перечислении `SpreadsheetCell`.
    let row = vec![
        SpreadsheetCell::Int(5),
        SpreadsheetCell::Float(2.3),
        SpreadsheetCell::Char('c'),
        SpreadsheetCell::Text(String::from("test text")),
    ];
}
