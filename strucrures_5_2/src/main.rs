#![allow(unused)]
/// Язык программирования Rust
/// 5 Использование структур для структурирования связанных данных
/// 5.2 Примеры использования структур

/// Главная функция программы.
///
/// Создает две переменные `w` и `h`, представляющие ширину и высоту прямоугольника соответственно.
/// Выводит в консоль площадь прямоугольника, используя функцию `area`.
/// Затем создает кортеж `rect1`, представляющий прямоугольник с теми же размерами,
/// и выводит его площадь, используя функцию `area_1`.

#[derive(Debug)]
struct Rectangle {
    width: u32,
    height: u32,
}

fn main() {
    // Инициализация переменных `w` и `h` для ширины и высоты прямоугольника.
    let w = 30;
    let h = 50;

    // Вывод в консоль площади прямоугольника, используя функцию `area`.
    println!(
        "Площать прямогугольника со сторонами {} и {} равна {}",
        w,
        h,
        area(w, h)
    );

    // Создание кортежа `rect1`, представляющего размеры прямоугольника.
    let rect1: (u32, u32) = (30, 50);

    // Вывод в консоль площади прямоугольника, используя функцию `area_1` и кортеж `rect1`.
    println!(
        "Площать прямоугольника со сторонами {} и {} равна {}",
        w,
        h,
        area_1(rect1)
    );

    // Создание экземпляра структуры `Rectangle` с именем `rect2`.
    let rect2 = Rectangle {
        width: 30,
        height: 50,
    };

    // Вывод в консоль площади прямоугольника, используя функцию `area_2` и структуру `rect2`.
    println!(
        "Площать прямоугольника со сторонами {} и {} равна {}",
        rect2.width,
        rect2.height,
        area_2(&rect2)
    );

    // Вывод информации о структуре `Rectangle` в консоль.
    println!("вывод структуры в консоль: {:?}", rect2);

    // Создание экземпляра `Rectangle` с масштабированной шириной.
    let scale = 2;
    let rect1 = Rectangle {
        width: dbg!(30 * scale), // Отладочный вывод масштабированной ширины.
        height: 50,
    };

    // Отладочный вывод информации о структуре `Rectangle`.
    dbg!(&rect1);
}

/// Вычисляет площадь прямоугольника на основе структуры `Rectangle`.
///
/// # Параметры
///
/// * `rectangle` - ссылка на экземпляр структуры `Rectangle`, содержащий ширину и высоту прямоугольника.
///
/// # Возвращает
///
/// Площадь прямоугольника как `u32`.
fn area_2(rectangle: &Rectangle) -> u32 {
    rectangle.width * rectangle.height
}

/// Вычисляет площадь прямоугольника.
///
/// # Параметры
///
/// * `w` - ширина прямоугольника типа `i32`.
/// * `h` - высота прямоугольника типа `i32`.
///
/// # Возвращает
///
/// Площадь прямоугольника как `i32`.
fn area(w: i32, h: i32) -> i32 {
    w * h
}

/// Вычисляет площадь прямоугольника на основе кортежа, содержащего его размеры.
///
/// # Параметры
///
/// * `dimensions` - кортеж, первый элемент которого представляет ширину (`i32`),
/// а второй - высоту (`i32`) прямоугольника.
///
/// # Возвращает
///
/// Площадь прямоугольника как `i32`.
fn area_1(dimensions: (u32, u32)) -> u32 {
    dimensions.0 * dimensions.1
}
